[tool.poetry]
name = "django-unicorn"
version = "0.51.0"
description = "A magical full-stack framework for Django."
authors = ["Adam Hill <unicorn@adamghill.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/adamghill/django-unicorn/"
homepage = "https://www.django-unicorn.com"
documentation = "https://www.django-unicorn.com/docs/"
keywords = ["django", "python", "javascript", "fullstack"]

[tool.poetry.urls]
"Funding" = "https://github.com/sponsors/adamghill"

[tool.poetry.dependencies]
python = ">=3.7,<4"
django = ">=2.2"
beautifulsoup4 = ">=4.8.0"
orjson = "^3.6.0"
shortuuid = "^1.0.1"
cachetools = "^4.1.1"
dataclasses = {version = "^0.8.0", python = "<3.7"}
decorator = "^4.4.2"
htmlmin = { version = "^0.1.12", optional = true }

# docs extras
Sphinx = { version = "^4.3.2", optional = true }
linkify-it-py = { version = "^1.0.3", optional = true }
myst-parser = { version = "^0.16.1", optional = true }
furo = { version = "^2021.11.23", optional = true }
sphinx-copybutton = { version = "^0.4.0", optional = true }
sphinx-autobuild = { version = "^2021.3.14", optional = true }
rst2pdf = { version = "^0.98", optional = true }

[tool.poetry.extras]
minify = ["htmlmin"]
docs = ["Sphinx", "linkify-it-py", "myst-parser", "furo", "sphinx-copybutton", "sphinx-autobuild", "rst2pdf"]

[tool.poetry.dev-dependencies]
pytest = "^6"
black = "*"
flake8 = "^3"
isort = "^5"
mypy = "<1"
django-stubs = "^1.5.0"
pytest-django = "^3"
bpython = "<1"
django-mock-queries = "^2.1.5"
pydantic = "^1.7.3"
pywatchman = "^1.4.1"
django-redis = "^4.12.1"
nox = "^2020.12.31"
poethepoet = "^0"
coverage = {extras = ["toml"], version = "^6"}
pytest-cov = "^3"
pytest-benchmark = "^4.0.0"

[tool.isort]
default_section = "THIRDPARTY"
known_first_party = ["django_unicorn", "example"]
known_django = "django"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
lines_after_imports = 2
multi_line_output = 3
include_trailing_comma = true
skip_glob = "*/migrations/*.py"
profile = "black"

[tool.pytest.ini_options]
addopts = "--quiet --failed-first --reuse-db --nomigrations -p no:warnings -m 'not slow' --benchmark-skip"
testpaths = [
    "tests"
]
markers = [
    "slow: marks tests as slow",
]

[tool.poe.tasks]
r = { cmd = "example/manage.py runserver 0:8080", help = "Run the dev server for the example project" }
mm = { cmd = "example/manage.py makemigrations", help = "Make migrations for the example project" }
mi = { cmd = "example/manage.py migrate", help = "Migrate the example project" }
md = ["mm", "mi"]
m = { cmd = "example/manage.py", help = "manage.py for the example project" }
tp = { cmd = "nox -r", help = "Run the entire Python test suite with nox" }
tj = { cmd = "npm run-script test", help = "Run the JavaScript unit tests" }
ta = ["tp", "tj"]
jb = { cmd = "npm run build", help = "Build the JavaScript library" }
t = { cmd = "pytest -m 'not slow'", help = "Run Python unit tests" }
tb = { cmd = "pytest tests/benchmarks/ --benchmark-autosave --benchmark-only", help = "Run Python unit tests with benchmarks" }
tbc = { cmd = "pytest tests/benchmarks/ --benchmark-only --benchmark-compare", help = "Run Python unit tests with compared benchmarks" }
tc = { cmd = "pytest --cov=django_unicorn", help = "Run tests with coverage" }
cr = { cmd = "coverage report", help = "Show coverage report" }
my = { cmd = "mypy .", help = "Run mypy" }
b = { cmd = "black . --check --quiet --extend-exclude migrations", help = "Run black" }
i = { cmd = "isort . --check --quiet", help = "Run isort" }
tm = ["b", "i", "tc", "my"]
sa = { cmd = "sphinx-autobuild -W docs/source docs/build", help = "Sphinx autobuild" }
sb = { cmd = "sphinx-build -W docs/source docs/build", help = "Build documentation" }
build = ["b", "i", "tc", "tj", "jb", "sb"]
publish = { shell = "poetry publish --build -r test && poetry publish" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"