import logging
from abc import ABC, abstractmethod

from django.http.response import HttpResponseRedirect

from django_unicorn.components import HashUpdate, LocationUpdate, PollUpdate
from django_unicorn.serializer import dumps, loads

logger = logging.getLogger(__name__)

class FrontendAction(ABC):
    """
    Any action or update to be performed on the frontend via client-side 
    javascript. Specifically, this defines the json response needed to call 
    actions on the fronted.
    
    Objects of this class and its methods are typically generated by 
    FrontendActions and then used to build a ComponentResponse. This whole 
    process is managed by a ComponentRequest.
    """

    def __init__(self, method_name, args=None, kwargs=None, value=None):
        self.method_name = method_name
        self.args = args or []
        self.kwargs = kwargs or {}
        self.redirect = {}
        self.poll = {}

        # TODO: Support a tuple/list return_value which could contain
        # multiple values
        self.value = value or {}
        if isinstance(value, HttpResponseRedirect):
            self.redirect = {
                "url": value.url,
            }
        elif isinstance(value, HashUpdate):
            self.redirect = {
                "hash": value.hash,
            }
        elif isinstance(value, LocationUpdate):
            self.redirect = {
                "url": value.redirect.url,
                "refresh": True,
                "title": value.title,
            }
        elif isinstance(value, PollUpdate):
            self.poll = value.to_json()

        if self.redirect:
            self.value = self.redirect

    def get_data(self, raise_errors: bool = False):
        try:
            serialized_value = loads(dumps(self.value))
            serialized_args = loads(dumps(self.args))
            serialized_kwargs = loads(dumps(self.kwargs))

            return {
                "method": self.method_name,
                "args": serialized_args,
                "kwargs": serialized_kwargs,
                "value": serialized_value,
            }
        except Exception as e:
            if raise_errors:
                raise e
            else:
                logger.exception(e)

        return {}
